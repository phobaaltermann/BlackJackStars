// –ü—Ä–æ—Å—Ç–∞—è, –Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ BlackJack.

// –ò–≥—Ä–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –æ–±—ä–µ–∫—Ç–µ `game`
const game = {
  deck: [],
  player: [],
  dealer: [],
  inRound: false,
  canDouble: false,
  doubled: false,
  bet: 10,
  money: 1000
};

const suits = ['‚ô†','‚ô•','‚ô¶','‚ô£'];
const ranks = ['2','3','4','5','6','7','8','9','10','J','Q','K','A'];

// --- DOM ---
const startScreen = document.getElementById('start-screen');
const startBtn = document.getElementById('start-btn');
const gameArea = document.getElementById('game-area');
const moneyDisplay = document.getElementById('money-display');
const betInput = document.getElementById('bet-input');

const dealerCardsDiv = document.getElementById('dealer-cards');
const playerCardsDiv = document.getElementById('player-cards');
const dealerSumDiv = document.getElementById('dealer-sum');
const playerSumDiv = document.getElementById('player-sum');
const statusDiv = document.getElementById('status');

const hitBtn = document.getElementById('hit-btn');
const standBtn = document.getElementById('stand-btn');
const doubleBtn = document.getElementById('double-btn');
const newBtn = document.getElementById('new-btn');

// --- Deck / cards helpers ---
function createDeck(numDecks = 1) {
  const deck = [];
  for (let d = 0; d < numDecks; d++) {
    for (const s of suits) {
      for (const r of ranks) {
        deck.push({r, s});
      }
    }
  }
  return deck;
}
function shuffle(deck) {
  for (let i = deck.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [deck[i], deck[j]] = [deck[j], deck[i]];
  }
}
function draw() {
  if (game.deck.length === 0) {
    game.deck = createDeck(4);
    shuffle(game.deck);
  }
  return game.deck.pop();
}
function cardToText(card) {
  return `${card.r}${card.s}`;
}
function calcValue(cards) {
  let total = 0;
  let aces = 0;
  for (const c of cards) {
    if (c.r === 'A') { total += 11; aces++; }
    else if (['J','Q','K'].includes(c.r)) total += 10;
    else total += parseInt(c.r, 10);
  }
  while (total > 21 && aces > 0) {
    total -= 10; aces--;
  }
  return total;
}

// --- UI update ---
function updateUI() {
  moneyDisplay.textContent = game.money;
  dealerCardsDiv.innerHTML = '';
  playerCardsDiv.innerHTML = '';

  // Dealer: –µ—Å–ª–∏ —Ä–∞—É–Ω–¥ –≤—Å—ë –µ—â—ë –∏–¥–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 1 –æ—Ç–∫—Ä—ã—Ç—É—é + 1 —Å–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç—É
  if (game.inRound) {
    // –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞
    const first = game.dealer[0];
    dealerCardsDiv.appendChild(makeCardNode(first));
    // –≤—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∞ —Å–∫—Ä—ã—Ç–∞
    if (game.dealer.length > 1) {
      const hidden = document.createElement('div');
      hidden.className = 'card hidden';
      hidden.textContent = 'üÇ†';
      dealerCardsDiv.appendChild(hidden);
    }
    dealerSumDiv.textContent = '?';
  } else {
    // –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞
    for (const c of game.dealer) dealerCardsDiv.appendChild(makeCardNode(c));
    dealerSumDiv.textContent = calcValue(game.dealer);
  }

  // –∏–≥—Ä–æ–∫
  for (const c of game.player) playerCardsDiv.appendChild(makeCardNode(c));
  playerSumDiv.textContent = calcValue(game.player);

  // –∫–Ω–æ–ø–∫–∏
  hitBtn.disabled = !game.inRound;
  standBtn.disabled = !game.inRound;
  doubleBtn.disabled = !game.inRound || !game.canDouble;
  newBtn.style.display = game.inRound ? 'none' : 'inline-block';
}

function makeCardNode(card) {
  const d = document.createElement('div');
  d.className = 'card';
  d.textContent = cardToText(card);
  return d;
}

function showStatus(text) {
  statusDiv.textContent = text;
}

// --- Game flow ---
function startGame() {
  // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  game.deck = createDeck(4);
  shuffle(game.deck);
  game.player = [];
  game.dealer = [];
  game.doubled = false;
  game.inRound = true;
  game.bet = Math.max(1, parseInt(betInput.value || 10, 10));
  // –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
  if (game.bet > game.money) {
    showStatus('–°—Ç–∞–≤–∫–∞ –±–æ–ª—å—à–µ, —á–µ–º –±–∞–ª–∞–Ω—Å! –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞ = –±–∞–ª–∞–Ω—Å.');
    game.bet = game.money;
    betInput.value = game.bet;
  }
  // —Ä–∞–∑–¥–∞—á–∞
  game.player.push(draw());
  game.dealer.push(draw());
  game.player.push(draw());
  game.dealer.push(draw());

  // –¥–∞–±–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∫–∞ —É –∏–≥—Ä–æ–∫–∞ 2 –∫–∞—Ä—Ç—ã –∏ –æ–Ω –Ω–µ –¥–µ–ª–∞–ª —Ö–æ–¥
  game.canDouble = (game.player.length === 2);
  showStatus(`–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å. –°—Ç–∞–≤–∫–∞: ${game.bet}`);
  // —Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—É—é –∑–æ–Ω—É
  startScreen.style.display = 'none';
  gameArea.style.display = 'block';

  updateUI();

  // –µ—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ 21 —Å—Ä–∞–∑—É ‚Äî –∫–æ–Ω–µ—Ü —Ä–∞—É–Ω–¥–∞ (–±–ª–µ–∫–¥–∂–µ–∫)
  const pv = calcValue(game.player);
  if (pv === 21) {
    endRound();
  }
}

function playerHit() {
  if (!game.inRound) return;
  game.player.push(draw());
  // –ø–æ—Å–ª–µ –ª—é–±–æ–≥–æ "hit" –¥–∞–±–ª –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  game.canDouble = false;
  updateUI();

  if (calcValue(game.player) > 21) {
    showStatus('–ü–µ—Ä–µ–±–æ—Ä! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ —Å—Ç–∞–≤–∫—É.');
    endRound();
  }
}

function playerDouble() {
  if (!game.inRound) return;
  // –ø—Ä–∞–≤–∏–ª–æ: –¥–∞–±–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–≤—É—Ö –∫–∞—Ä—Ç–∞—Ö (–æ–±—ã—á–Ω–æ) –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ
  if (!game.canDouble || game.player.length !== 2) {
    showStatus('–î–∞–±–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –∫–∞—Ä—Ç–∞—Ö).');
    return;
  }
  if (game.bet * 2 > game.money) {
    showStatus('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏.');
    return;
  }
  // —É–¥–≤–∞–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
  game.bet *= 2;
  game.doubled = true;
  // –¥–∞—ë–º —Ä–æ–≤–Ω–æ –æ–¥–Ω—É –∫–∞—Ä—Ç—É –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
  game.player.push(draw());
  game.canDouble = false;
  updateUI();

  // –ø–æ—Å–ª–µ –¥–∞–±–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–∏–ª–µ—Ä—É
  endRound();
}

function playerStand() {
  if (!game.inRound) return;
  endRound();
}

function dealerPlay() {
  // –¥–∏–ª–µ—Ä –±–µ—Ä—ë—Ç, –ø–æ–∫–∞ < 17
  while (calcValue(game.dealer) < 17) {
    game.dealer.push(draw());
  }
}

function endRound() {
  // –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
  game.inRound = false;
  // –¥–∏–ª–µ—Ä –∏–≥—Ä–∞–µ—Ç
  dealerPlay();
  updateUI();

  const pv = calcValue(game.player);
  const dv = calcValue(game.dealer);
  let resultText = '';
  if (pv > 21) {
    resultText = `–í—ã –ø–µ—Ä–µ–±—Ä–∞–ª–∏ (${pv}). –ü—Ä–æ–∏–≥—Ä—ã—à.`;
    game.money -= game.bet;
  } else if (dv > 21) {
    resultText = `–î–∏–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª (${dv}). –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!`;
    game.money += game.bet;
  } else if (pv > dv) {
    resultText = `–í—ã ${pv} vs ${dv} ‚Äî –ø–æ–±–µ–¥–∞!`;
    game.money += game.bet;
  } else if (pv < dv) {
    resultText = `–í—ã ${pv} vs ${dv} ‚Äî –ø—Ä–æ–∏–≥—Ä—ã—à.`;
    game.money -= game.bet;
  } else {
    resultText = `–ù–∏—á—å—è ${pv} vs ${dv}. –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.`;
    // –±–∞–ª–∞–Ω—Å –Ω–µ –º–µ–Ω—è–µ–º
  }

  showStatus(resultText + ` –ë–∞–ª–∞–Ω—Å: ${game.money}`);
  updateUI();

  // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–æ–≤–∞—è –∏–≥—Ä–∞"
  newBtn.style.display = 'inline-block';
}

// --- Event listeners ---
startBtn.addEventListener('click', () => {
  startGame();
});

hitBtn.addEventListener('click', () => {
  playerHit();
});

standBtn.addEventListener('click', () => {
  playerStand();
});

doubleBtn.addEventListener('click', () => {
  playerDouble();
});

newBtn.addEventListener('click', () => {
  // –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —ç–∫—Ä–∞–Ω
  game.inRound = false;
  startScreen.style.display = 'block';
  gameArea.style.display = 'none';
  showStatus('');
  newBtn.style.display = 'none';
  // –æ—Å—Ç–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞–≤–∫—É –∫–∞–∫ –µ—Å—Ç—å
  moneyDisplay.textContent = game.money;
});

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
updateUI();
